// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/AronditFire/todo-app/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskList is a mock of TaskList interface.
type MockTaskList struct {
	ctrl     *gomock.Controller
	recorder *MockTaskListMockRecorder
}

// MockTaskListMockRecorder is the mock recorder for MockTaskList.
type MockTaskListMockRecorder struct {
	mock *MockTaskList
}

// NewMockTaskList creates a new mock instance.
func NewMockTaskList(ctrl *gomock.Controller) *MockTaskList {
	mock := &MockTaskList{ctrl: ctrl}
	mock.recorder = &MockTaskListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskList) EXPECT() *MockTaskListMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskList) CreateTask(userID int, task entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", userID, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskListMockRecorder) CreateTask(userID, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskList)(nil).CreateTask), userID, task)
}

// DeleteTask mocks base method.
func (m *MockTaskList) DeleteTask(userID, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", userID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskListMockRecorder) DeleteTask(userID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskList)(nil).DeleteTask), userID, taskID)
}

// GetAllTask mocks base method.
func (m *MockTaskList) GetAllTask(userID int) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTask", userID)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTask indicates an expected call of GetAllTask.
func (mr *MockTaskListMockRecorder) GetAllTask(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTask", reflect.TypeOf((*MockTaskList)(nil).GetAllTask), userID)
}

// GetTaskByID mocks base method.
func (m *MockTaskList) GetTaskByID(userID, id int) (entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", userID, id)
	ret0, _ := ret[0].(entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskListMockRecorder) GetTaskByID(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskList)(nil).GetTaskByID), userID, id)
}

// UpdateTask mocks base method.
func (m *MockTaskList) UpdateTask(userID, taskId int, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", userID, taskId, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskListMockRecorder) UpdateTask(userID, taskId, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskList)(nil).UpdateTask), userID, taskId, desc)
}

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(userReg entity.UserRegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userReg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(userReg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), userReg)
}

// GetUser mocks base method.
func (m *MockAuthorization) GetUser(username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthorizationMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthorization)(nil).GetUser), username)
}

// GetUserByID mocks base method.
func (m *MockAuthorization) GetUserByID(id int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthorizationMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthorization)(nil).GetUserByID), id)
}

// MockParsingJSON is a mock of ParsingJSON interface.
type MockParsingJSON struct {
	ctrl     *gomock.Controller
	recorder *MockParsingJSONMockRecorder
}

// MockParsingJSONMockRecorder is the mock recorder for MockParsingJSON.
type MockParsingJSONMockRecorder struct {
	mock *MockParsingJSON
}

// NewMockParsingJSON creates a new mock instance.
func NewMockParsingJSON(ctrl *gomock.Controller) *MockParsingJSON {
	mock := &MockParsingJSON{ctrl: ctrl}
	mock.recorder = &MockParsingJSONMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParsingJSON) EXPECT() *MockParsingJSONMockRecorder {
	return m.recorder
}

// GetJsonTable mocks base method.
func (m *MockParsingJSON) GetJsonTable() ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJsonTable")
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJsonTable indicates an expected call of GetJsonTable.
func (mr *MockParsingJSONMockRecorder) GetJsonTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJsonTable", reflect.TypeOf((*MockParsingJSON)(nil).GetJsonTable))
}

// ParseJSON mocks base method.
func (m *MockParsingJSON) ParseJSON(bindfile entity.BindFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJSON", bindfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseJSON indicates an expected call of ParseJSON.
func (mr *MockParsingJSONMockRecorder) ParseJSON(bindfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJSON", reflect.TypeOf((*MockParsingJSON)(nil).ParseJSON), bindfile)
}
